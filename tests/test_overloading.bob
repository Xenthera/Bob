print("\n--- Method Overloading: Class Methods Only ---");

class Vec2 {
  var x; var y;
  func init(x,y){ this.x = x; this.y = y; }
  func mag(){ return (this.x*this.x + this.y*this.y).toInt(); }
  func add(dx,dy){ this.x = this.x + dx; this.y = this.y + dy; return this; }
  // Method overloads
  func scale(f){ this.x = this.x * f; this.y = this.y * f; return this; }
  func scale(ax, ay){ this.x = this.x * ax; this.y = this.y * ay; return this; }
}

var v = Vec2(3,4);
assert(v.mag() == 25, "mag before");
v.scale(2);
assert(v.mag() == 100, "scale(2)");
var v2 = Vec2(3,4);
v2.scale(2,3);
assert(v2.mag() == ( (3*2)*(3*2) + (4*3)*(4*3) ).toInt(), "scale(2,3)");
// wrong arity
try { v.scale(); assert(false, "scale() should throw"); } catch (e) { assert(true, "threw"); }

print("\n--- Simple Extensions (No Overloading) ---");

extension string {
  func wrap(){ return "[" + this + "]"; }
}

extension array {
  func head(){ if (this.len()==0) return none; return this[0]; }
}

extension dict {
  func pick(k){ if (this.has(k)) return this[k]; return none; }
}

extension any {
  func tag(){ return toString(this); }
}

extension number {
  func times(){ return 0; }
}

assert("hi".wrap() == "[hi]", "string.wrap()");

var arr = [1,2,3,4];
assert(arr.head() == 1, "array.head()");

var d = {"a":1};
assert(d.pick("a") == 1, "dict.pick(k)");

assert(5.tag() == "5", "any.tag()");

assert(3.times() == 0, "number.times()");

print("Method overloading tests passed!");
