// Test to verify that type() function correctly identifies user-defined functions
// This test specifically addresses the issue where user-defined functions were
// being reported as "builtin_function" instead of "function"

print("Testing type() function fix for user-defined functions...");

// Test basic types
assert(type(42) == "number", "Type of number should be 'number'");
assert(type(3.14) == "number", "Type of decimal should be 'number'");
assert(type("hello") == "string", "Type of string should be 'string'");
assert(type(true) == "boolean", "Type of boolean should be 'boolean'");
assert(type(false) == "boolean", "Type of boolean should be 'boolean'");
assert(type(none) == "none", "Type of none should be 'none'");

// Test function types - this was the failing case
func testFunc() {
    return 42;
}
assert(type(testFunc) == "function", "Type of user function should be 'function'");

// Test builtin function types
assert(type(print) == "builtin_function", "Type of print should be 'builtin_function'");
assert(type(input) == "builtin_function", "Type of input should be 'builtin_function'");
assert(type(type) == "builtin_function", "Type of type should be 'builtin_function'");

// Test function calls
assert(type(testFunc()) == "number", "Type of function call should be 'number'");
assert(type(5 + 3) == "number", "Type of arithmetic should be 'number'");
assert(type("hello" + "world") == "string", "Type of string concat should be 'string'");

// Test multiple user-defined functions
func func1() { return 1; }
func func2(x) { return x * 2; }
func func3(x, y) { return x + y; }

assert(type(func1) == "function", "Type of func1 should be 'function'");
assert(type(func2) == "function", "Type of func2 should be 'function'");
assert(type(func3) == "function", "Type of func3 should be 'function'");

// Test function calls
assert(type(func1()) == "number", "Type of func1() should be 'number'");
assert(type(func2(5)) == "number", "Type of func2(5) should be 'number'");
assert(type(func3(1, 2)) == "number", "Type of func3(1, 2) should be 'number'");

print("Type function fix test: PASS");
